#! /usr/bin/python
import sys
import argparse
import urllib2
import urlparse
import urllib
from xml.dom.minidom import parseString

# Utility to retrieve GMail Atom feed info.

TOP_LEVEL_URL = 'https://mail.google.com'
BASE_URL = 'https://mail.google.com/mail/feed/atom/'

def display_message(message):
    # Display it
    print "%s <%s>:\t%s" % (message["name"], message["email"], message["title"])

class Counter(object):
    def __init__(self):
      self.x = 0

    def inc(self):
      self.x = self.x + 1

    def val(self):
      return self.x

def main():
    parser = argparse.ArgumentParser('gmail-feed')
    parser.add_argument('-u, --username', dest='username', \
                        help='your gmail login (prompted if not specified)',\
                        default=None)
    parser.add_argument('-p, --password', dest='password', \
                        help='your gmail password (prompted if not specified)',\
                        default=None)
    parser.add_argument('-l, --label', dest='label', \
                        help='gmail label to retrieve (default is `unread`)',\
                        default='unread')
    parser.add_argument('-c, --count-only', dest='count_only', \
                        help='if specified, only outputs the number of entries \
                        in the feed.', action='store_true')
    parser.add_argument('-v, --verbose', dest='verbose', \
                        help='verbose output (mainly for debug)', \
                        action='store_true')
    opts = parser.parse_args(sys.argv[1:])

    if opts.username is None:
        opts.username = raw_input("Username:")
    if opts.password is None:
        opts.password = raw_input("Password:")

    atom_feed = GmailAtomFeed(opts)
    if opts.count_only:
      counter = Counter()
      atom_feed.on_message(lambda _: counter.inc())
      atom_feed.retrieve()
      print counter.val()
    else:
      atom_feed.on_message(display_message)
      atom_feed.retrieve()

class GmailAtomFeed(object):
  def __init__(self, opts):
    self.opts = opts
    self.callback = None

  def emit_message(self, message):
    if self.callback is not None:
      self.callback(message)

  def on_message(self, fn):
    self.callback = fn

  def retrieve(self):
    opts = self.opts

    # Build url to open
    url = urlparse.urljoin(BASE_URL, urllib.quote(opts.label))
    if opts.verbose:
      print 'Hitting URL: %s' % (url)
      print 'With username: %s' % (opts.username)
      print 'With password: %s' % ('*' * len(opts.password))

    # Authentication handler
    passwd_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
    passwd_mgr.add_password(None, TOP_LEVEL_URL, user = opts.username, \
                            passwd = opts.password)
    auth_handler = urllib2.HTTPBasicAuthHandler(passwd_mgr)
    opener = urllib2.build_opener(auth_handler)
    urllib2.install_opener(opener)

    remote = None
    try:
        remote = urllib2.urlopen(url)
        raw_feed = remote.read()
    except urllib2.HTTPError, e:
        # TODO: Display understandable message
        print "HTTP error: %s" % (e.msg)
        if e.code == 401:
          print "Perhaps you mispelled your address or made a typo while entering your password?"
        return
    except urllib2.URLError, e:
        # TODO: Display understandable message
        raise e
    finally:
        if remote is not None:
            remote.close()

    feed = parseString(raw_feed)

    entries = feed.getElementsByTagName('entry')

    for entry in entries:
        # Get entry data
        message = {}
        for field in ["title", "email", "name", "issued", "summary"]:
          message[field] = entry.getElementsByTagName(field)[0].firstChild.data

        self.emit_message(message)

if __name__ == "__main__":
    main()
